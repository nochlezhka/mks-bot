# -*- coding: utf-8 -*-

import sys
import logging
import time
import telebot

from utils import config as cfg_utils
from mks import check
from utils import table_to_img as tti

sys.path.append('../resources/')
config = cfg_utils.load("../resources/config.yml")
latest_version = check.get_latest_version(config["github"]["token"])

bot = telebot.TeleBot(config["telegram"]["token"])
telebot.logger.setLevel(logging.INFO)

text_messages = {
    'start': '{name}, –ø—Ä–∏–≤–µ—Ç! üéâ –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é ‚ú®',
    'status': '{name}, –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞—Ç—É—Å–∞',

    'help': '/start - –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω \n/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å \n/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É',
    'permission_error': '–°–æ—Ä—Ä–∏, –º—ã –Ω–µ –∑–Ω–∞–µ–º, –∫—Ç–æ —Ç—ã. –ù–∞–ø–∏—à–∏ @kvendingoldo —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.',

    'processing': '–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å, —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥',

    'wrong_msg': '–ü–æ—Ö–æ–∂–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–æ–π —á–µ—Ä–µ–∑ /help –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≥–æ —á–µ—Ä–µ–∑ /start'
}

USE_PRETTY_TABLE = False


@bot.message_handler(commands=['start'])
def handler_start(message):
    if message.from_user.username not in config["allowed_users"]:
        try:
            msg = bot.send_message(
                message.from_user.id,
                text_messages['permission_error'].format(name=message.from_user.first_name)
            )
        except Exception as ex:
            logging.error(ex)
    else:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å', '–ø–æ–∫–∞–∑–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å', '–ø–æ–º–æ—â—å')

        try:
            msg = bot.send_message(
                message.from_user.id,
                text_messages['start'].format(name=message.from_user.first_name),
                reply_markup=markup
            )
        except Exception as ex:
            logging.error(ex)


@bot.message_handler(commands=['status'])
def handler_status(message):
    if message.from_user.username not in config["allowed_users"]:
        try:
            msg = bot.send_message(
                message.from_user.id,
                text_messages['permission_error'].format(name=message.from_user.first_name)
            )
        except Exception as ex:
            logging.error(ex)
    else:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å', '–ø–æ–∫–∞–∑–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å')

        try:
            msg = bot.send_message(
                message.from_user.id,
                text_messages['status'].format(name=message.from_user.first_name),
                reply_markup=markup
            )
        except Exception as ex:
            logging.error(ex)


@bot.message_handler(commands=['help'])
def handler_help(message):
    if message.from_user.username not in config["allowed_users"]:
        try:
            msg = bot.send_message(
                message.from_user.id,
                text_messages['permission_error'].format(name=message.from_user.first_name)
            )
        except Exception as ex:
            logging.error(ex)
    else:
        try:
            bot.send_message(
                message.from_user.id,
                text_messages['help'],
                reply_markup=telebot.types.ReplyKeyboardRemove()
            )
        except Exception as ex:
            logging.error(ex)


@bot.message_handler(content_types=['text'])
def handler_text(message):
    if message.from_user.username not in config["allowed_users"]:
        try:
            msg = bot.send_message(
                message.from_user.id,
                text_messages['permission_error'].format(name=message.from_user.first_name)
            )
        except Exception as ex:
            logging.error(ex)
    else:
        if message.text == '–ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å':
            try:
                bot.send_message(
                    message.from_user.id,
                    text_messages['processing'],
                    reply_markup=telebot.types.ReplyKeyboardRemove()
                )
                header, data = check.get_short_status(config["clients"], config["default_version_endpoint"])
                bot.send_photo(
                    message.from_user.id,
                    photo=tti.convert(header, data, latest_version)
                )
            except Exception as ex:
                logging.error(ex)

        if message.text == '–ø–æ–∫–∞–∑–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å':
            try:
                bot.send_message(
                    message.from_user.id,
                    text_messages['processing'],
                    reply_markup=telebot.types.ReplyKeyboardRemove()
                )

                header, data = check.get_long_status(config["clients"], config["default_version_endpoint"])
                bot.send_photo(
                    message.from_user.id,
                    photo=tti.convert(header, data, latest_version)
                )
            except Exception as ex:
                logging.error(ex)

        elif message.text == '–ø–æ–º–æ—â—å':
            try:
                bot.send_message(
                    message.from_user.id,
                    text_messages['help'],
                    reply_markup=telebot.types.ReplyKeyboardRemove()
                )
            except Exception as ex:
                logging.error(ex)


def run():
    while True:
        try:
            bot.polling(non_stop=True, interval=0, timeout=10)
        except Exception as ex:
            logging.info("[telegram] Failed: %s" % ex)
            time.sleep(3)
